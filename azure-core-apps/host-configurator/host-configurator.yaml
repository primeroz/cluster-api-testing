---
apiVersion: v1
data:
  manage-startup-script.sh: |+
    #!/bin/bash
    # Copyright 2016 The Kubernetes Authors.
    #
    # Licensed under the Apache License, Version 2.0 (the "License");
    # you may not use this file except in compliance with the License.
    # You may obtain a copy of the License at
    #
    #     http://www.apache.org/licenses/LICENSE-2.0
    #
    # Unless required by applicable law or agreed to in writing, software
    # distributed under the License is distributed on an "AS IS" BASIS,
    # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    # See the License for the specific language governing permissions and
    # limitations under the License.

    set -o errexit
    set -o nounset
    set -o pipefail

    CHECKPOINT_PATH="${CHECKPOINT_PATH:-/tmp/startup-script.kubernetes.io_$(md5sum <<<"${STARTUP_SCRIPT}" | cut -c-32)}"
    CHECK_INTERVAL_SECONDS="30"
    EXEC=(nsenter -t 1 -m -u -i -n -p --)

    do_startup_script() {
      local err=0;

      "${EXEC[@]}" bash -c "${STARTUP_SCRIPT}" && err=0 || err=$?
      if [[ "${err}" -ne 0 ]]; then
        echo "!!! startup-script failed! exit code '${err}'" 1>&2
        return 1
      fi

      "${EXEC[@]}" touch "${CHECKPOINT_PATH}"
      echo "!!! startup-script succeeded!" 1>&2
      return 0
    }

    while :; do
      "${EXEC[@]}" stat "${CHECKPOINT_PATH}" > /dev/null 2>&1 && err=0 || err=$?
      if [[ "${err}" -ne 0 ]]; then
        do_startup_script
      fi

      echo "Watchdog Log Line on ${NODE_NAME:-$HOSTNAME}"
      sleep "${CHECK_INTERVAL_SECONDS}"
    done

kind: ConfigMap
metadata:
  annotations:
    app.kubernetes.io/managed-by: k8s-bootstrap
  labels:
    app.kubernetes.io/part-of: host-configurer
    k8s-app: host-configurator
    name: host-conf-manage-script
  name: host-conf-manage-script
  namespace: kube-system
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  annotations:
    app.kubernetes.io/managed-by: k8s-bootstrap
  labels:
    app.kubernetes.io/name: host-configurator
    app.kubernetes.io/part-of: host-configurer
    k8s-app: host-configurator
    name: host-configurator
  name: host-configurator
  namespace: kube-system
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: host-configurator
      name: host-configurator
  template:
    metadata:
      annotations:
        configmap-checksum: fdc64348ff3857c9cb56076a5c7dcc0e
      labels:
        app.kubernetes.io/name: host-configurator
        app.kubernetes.io/part-of: host-configurer
        k8s-app: host-configurator
        name: host-configurator
    spec:
      containers:
      - command:
        - /bin/bash
        - /manage-startup-script.sh
        env:
        - name: STARTUP_SCRIPT
          value: |
            #!/bin/bash

            set -o errexit
            set -o pipefail
            set -o nounset

            echo "Startup Script Completed"
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        image: gcr.io/google-containers/startup-script:v2
        imagePullPolicy: IfNotPresent
        name: host-configurator
        resources:
          limits:
            cpu: 100m
            memory: 128Mi
          requests:
            cpu: 10m
            memory: 10Mi
        securityContext:
          privileged: true
        volumeMounts:
        - mountPath: /manage-startup-script.sh
          name: manage-startup-script
          subPath: manage-startup-script.sh
      hostPID: true
      tolerations:
      - effect: NoSchedule
        operator: Exists
      - key: CriticalAddonsOnly
        operator: Exists
      - effect: NoExecute
        operator: Exists
      volumes:
      - configMap:
          name: host-conf-manage-script
        name: manage-startup-script
  updateStrategy:
    rollingUpdate:
      maxUnavailable: 1
    type: RollingUpdate
